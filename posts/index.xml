<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on tail -f qbart.dev.log</title><link>https://qbart.dev/posts/</link><description>Recent content in Posts on tail -f qbart.dev.log</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>Bartłomiej Wójtowicz</copyright><lastBuildDate>Mon, 24 Feb 2020 13:00:00 +0200</lastBuildDate><atom:link href="https://qbart.dev/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Publication: Boosting File Uploads With Amazon S3 Transfer Acceleration</title><link>https://qbart.dev/posts/2020/publication-boosting-file-uploads-with-amazon-s3-transfer-acceleration/</link><pubDate>Mon, 24 Feb 2020 13:00:00 +0200</pubDate><guid>https://qbart.dev/posts/2020/publication-boosting-file-uploads-with-amazon-s3-transfer-acceleration/</guid><description>Article about using Amazon S3 Transfer Acceleration.</description><content type="html"><![CDATA[<p><a href="https://selleo.com/blog/boosting-file-uploads-with-amazon-s3-transfer-acceleration?utm_source=qbart.dev&amp;utm_campaign=qbart.dev">Article</a> about using Amazon S3 Transfer Acceleration.</p>
]]></content></item><item><title>Schema based multi-tenancy in PostgreSQL</title><link>https://qbart.dev/posts/2019/schema-based-multi-tenancy-in-postgresql/</link><pubDate>Wed, 09 Oct 2019 13:00:00 +0200</pubDate><guid>https://qbart.dev/posts/2019/schema-based-multi-tenancy-in-postgresql/</guid><description>Presentation about multi-tenancy in pure PostgreSQL using event triggers.</description><content type="html">&lt;p>&lt;a href="https://docs.google.com/presentation/d/1SQ0sXIPS7sP8n6HKgrRFdniBaUX-dqpxsYmEtpZPbyY/edit?usp=sharing">Presentation&lt;/a> about multi-tenancy in pure PostgreSQL using event triggers.&lt;/p></content></item><item><title>Experimenting With Github Actions (beta)</title><link>https://qbart.dev/posts/2019/experimenting-with-github-actions-beta/</link><pubDate>Sat, 05 Jan 2019 18:00:00 +0200</pubDate><guid>https://qbart.dev/posts/2019/experimenting-with-github-actions-beta/</guid><description>This article was originally published here.
With the upcoming new GitHub Actions feature, I was very excited to test it, so I immediately signed up for the beta access and finally my invitation had been accepted.
The reason for my excitement mainly comes from my current project where I am mostly responsible for managing the infrastructure in AWS (Terraform) and backend development (Ruby on Rails) — if I have time for it.</description><content type="html"><![CDATA[<p>This article was originally published <a href="https://medium.com/selleo/experimenting-with-github-actions-beta-760e61fab0e1">here</a>.</p>
<p>With the upcoming new GitHub Actions feature, I was very excited to test it, so I immediately signed up for the beta access and finally my invitation had been accepted.</p>
<p>The reason for my excitement mainly comes from my current project where I am mostly responsible for managing the infrastructure in AWS (Terraform) and backend development (Ruby on Rails) — if I have time for it. We also have a lot of PWA that we deploy to AWS Cloudfront so there is a constant need for automation (we still do some things manually but we are improving everyday). Our simplified pipeline looks like this:</p>
<ol>
<li>GitHub PR (master &lt;- feature branch)</li>
<li>CircleCI</li>
</ol>
<ul>
<li>linter</li>
<li>specs</li>
<li>aws push to CodePipeline or trigger Cloudfront invalidation for PWA (only from master)</li>
</ul>
<ol start="3">
<li>AWS CodePipeline starts image building and ECS deployment</li>
</ol>
<p>As much as I like some of the Amazon services, AWS CodePipeline is not one of them so with GitHub Actions on the rise I hope to replace it completely. To verify if that&rsquo;s even possible I created a dummy project that will test the following:</p>
<ul>
<li>linter (rubocop)</li>
<li>tests (rspec)</li>
<li>deployment from master only (Heroku will do for now, I can expand that later to AWS)</li>
<li>notification (when the process is done)</li>
</ul>
<p>In this article, I won&rsquo;t be going into details what GitHub Actions is and how everything works because GitHub documentation will do a much better job and I don&rsquo;t want to duplicate the content that is already there, especially, that it is a beta and things might change. I will only highlight a few things and most of the time I will leave you with the link to the GitHub pages.</p>
<p>For the Ruby app I used Sinatra and wrote one silly endpoint:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">get <span style="color:#f1fa8c">&#39;/&#39;</span> <span style="color:#ff79c6">do</span>
   <span style="color:#f1fa8c">&#34;</span><span style="color:#f1fa8c">#{</span>ENV<span style="color:#ff79c6">[</span><span style="color:#f1fa8c">&#39;RACK_ENV&#39;</span><span style="color:#ff79c6">]</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">: Hello there! My secret is </span><span style="color:#f1fa8c">#{</span>ENV<span style="color:#ff79c6">[</span><span style="color:#f1fa8c">&#39;MY_SECRET&#39;</span><span style="color:#ff79c6">]</span><span style="color:#f1fa8c">}</span><span style="color:#f1fa8c">&#34;</span>
<span style="color:#ff79c6">end</span>
</code></pre></div><p>and its corresponding spec:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">describe <span style="color:#f1fa8c">&#39;Test GitHub Action&#39;</span> <span style="color:#ff79c6">do</span>
  it <span style="color:#f1fa8c">&#39;returns appropriate text for index page&#39;</span> <span style="color:#ff79c6">do</span>
    get <span style="color:#f1fa8c">&#39;/&#39;</span>
    expect(last_response<span style="color:#ff79c6">.</span>body)<span style="color:#ff79c6">.</span>to eq <span style="color:#f1fa8c">&#39;test: Hello there! My secret is 123&#39;</span>
  <span style="color:#ff79c6">end</span>
<span style="color:#ff79c6">end</span>
</code></pre></div><p>For Docker, no surprises here, just a small file:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-docker" data-lang="docker"><span style="color:#ff79c6">FROM</span><span style="color:#f1fa8c"> ruby:2.5.1</span>
<span style="color:#ff79c6">ARG</span> RACK_ENV
<span style="color:#ff79c6">ARG</span> PORT
<span style="color:#ff79c6">ENV</span> APP_HOME /app
<span style="color:#ff79c6">RUN</span> apt-get update -qq <span style="color:#ff79c6">&amp;&amp;</span> apt-get install -y build-essential
<span style="color:#ff79c6">RUN</span> mkdir <span style="color:#8be9fd;font-style:italic">$APP_HOME</span>
<span style="color:#ff79c6">WORKDIR</span><span style="color:#f1fa8c"> $APP_HOME</span>
<span style="color:#ff79c6">ADD</span> . <span style="color:#8be9fd;font-style:italic">$APP_HOME</span>/
<span style="color:#ff79c6">RUN</span> bundle install — without development test
<span style="color:#ff79c6">CMD</span> rackup -p <span style="color:#8be9fd;font-style:italic">$PORT</span> — host 0.0.0.0
</code></pre></div><p>GitHub Actions come with some predefined actions built by the GitHub team. One of them is Heroku and Docker cli tools, to name a few. For more, please take a look at the documentation <a href="https://github.com/actions">here</a>.</p>
<p>There is also a GUI for defining actions and works pretty well but I prefer doing this in my code editor.</p>
<p>First, create a workflow file <code>.github/main.workflow</code>:</p>
<pre><code class="language-github" data-lang="github">workflow &quot;Test and deploy to Heroku&quot; {
 on = &quot;push&quot;
 resolves = [&quot;ruby.build&quot;]
}
</code></pre><p><a href="https://developer.github.com/actions/managing-workflows/workflow-configuration-options/">Workflow</a> definition is pretty self-explanatory so just a short comment:</p>
<ul>
<li><code>on</code> defines event when the whole process kicks in (push type is the only one available in beta)</li>
<li><code>resolves</code> specifies a list of target actions to resolve (you can put any text here but I kinda like namespace.action convention for my purposes - this comes in handy later when you declare your action dependencies)</li>
</ul>
<p>First action:</p>
<pre><code class="language-github" data-lang="github">action &quot;ruby.build&quot; {
 uses = &quot;actions/docker/cli@master&quot;
 args = &quot;build -f Dockerfile.test -t ci-$GITHUB_SHA:latest .&quot;
}
</code></pre><p>This will build a docker container that will be used for linting and testing.</p>
<p>Please also note that there some built-in <code>GITHUB_*</code> envs for you to use, list <a href="https://developer.github.com/actions/creating-github-actions/accessing-the-runtime-environment/#environment-variables">here</a>.</p>
<p>Action breakdown:</p>
<ul>
<li><code>uses</code> declares what kind of action will it be and could be read as follows: <code>:github_user_or_org_name/:repository/:folder@:ref</code> — as a ref I used master but for production workflows, you probably want to stick with a specific release tag or commit SHA and upgrade periodically</li>
<li><code>args</code> are just arguments passed to underlying command (in this action it will be <code>docker ...</code>)</li>
</ul>
<p>Take a look here how the action repository looks like <a href="https://github.com/actions/docker/tree/master/cli">here</a>.</p>
<p>Next part of the workflow can be run in parallel so:</p>
<pre><code class="language-github" data-lang="github">action &quot;ruby.rubocop&quot; {
 uses = &quot;actions/docker/cli@master&quot;
 needs = [&quot;ruby.build&quot;]
 args = &quot;run ci-$GITHUB_SHA:latest rubocop&quot;
}

action &quot;ruby.rspec&quot; {
 uses = &quot;actions/docker/cli@master&quot;
 needs = [&quot;ruby.build&quot;]
 args = &quot;run ci-$GITHUB_SHA:latest rspec&quot;
}
</code></pre><p>Nothing new here except <code>needs</code> that specifies dependencies for actions (and that&rsquo;s why I am using <code>namespace.action</code> style rather than using <code>Build Ruby image</code> etc., it&rsquo;s just easier for me to track it with eyes).</p>
<p>I used a separate <code>Dockerfile</code> for a test environment so I can declare required variables there:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-docker" data-lang="docker"><span style="color:#ff79c6">FROM</span><span style="color:#f1fa8c"> ruby:2.5.1</span>

<span style="color:#ff79c6">ENV</span> RACK_ENV test
<span style="color:#ff79c6">ENV</span> MY_SECRET <span style="color:#bd93f9">123</span> <span style="color:#6272a4"># if you want this to be out of the repo just use `ARG MY_SECRET` and define secrets in github action</span>
<span style="color:#ff79c6">ENV</span> APP_HOME /app

<span style="color:#ff79c6">RUN</span> apt-get update -qq <span style="color:#ff79c6">&amp;&amp;</span> apt-get install -y build-essential
<span style="color:#ff79c6">RUN</span> mkdir <span style="color:#8be9fd;font-style:italic">$APP_HOME</span>

<span style="color:#ff79c6">WORKDIR</span><span style="color:#f1fa8c"> $APP_HOME</span>
<span style="color:#ff79c6">ADD</span> . <span style="color:#8be9fd;font-style:italic">$APP_HOME</span>/

<span style="color:#ff79c6">RUN</span> bundle install
</code></pre></div><p>Ok, so tests are running, now we want to start a deployment but only if the branch is <code>master</code>. There is another pre-built <a href="https://github.com/actions/bin">action</a> for that:</p>
<pre><code class="language-github" data-lang="github">action &quot;git.master&quot; {
  uses = &quot;actions/bin/filter@master&quot;
  needs = [&quot;ruby.rubocop&quot;, &quot;ruby.rspec&quot;]
  args = &quot;branch master&quot;
}
</code></pre><p>Before we start with Heroku workflow we need to create a project first. We will also need:</p>
<ul>
<li>to generate Heroku api key (<code>heroku authorizations:create</code>)</li>
<li>to set the stack to the container based (<code>heroku stack:set container</code>)</li>
<li>a project name (I named mine <code>test-github-actions</code>)</li>
</ul>
<p>Heroku action is described <a href="https://github.com/actions/heroku">here</a>. As of now, there is only one required secret <code>HEROKU_API_KEY</code> that has to contain your authorization key. You want to add this key to GitHub <a href="https://developer.github.com/actions/managing-workflows/storing-secrets/">secrets</a>.</p>
<pre><code class="language-github" data-lang="github">action &quot;heroku.login&quot; {
  uses = &quot;actions/heroku@master&quot;
  needs = [&quot;git.master&quot;]
  args = &quot;container:login&quot;  secrets = [&quot;HEROKU_API_KEY&quot;]
}
</code></pre><p><code>secrets</code> tells to decrypt declared variables in this action and expose them internally as an ENV (otherwise they won&rsquo;t be available), also <strong>do not</strong> print them because they might remain in logs.</p>
<p>Once we are logged in we can push our image:</p>
<pre><code class="language-github" data-lang="github">action &quot;heroku.push&quot; {
  uses = &quot;actions/heroku@master&quot;
  needs = &quot;heroku.login&quot;
  args = &quot;container:push web&quot;

  secrets = [
    &quot;HEROKU_API_KEY&quot;,
    &quot;HEROKU_APP&quot;
  ]

  env = {
    RACK_ENV = &quot;production&quot;
  }
}
</code></pre><p>A little more explanation here, first I used <code>HEROKU_APP</code> which means that container will push image to whatever app that is defined there. There are actually multiple ways of how this could be achieved:</p>
<pre><code class="language-github" data-lang="github">args = &quot;container:push -a test-github-actions web&quot;
</code></pre><p>or</p>
<pre><code class="language-github" data-lang="github">args = &quot;container:push web&quot;

env = {
  HEROKU_APP = &quot;test-github-actions&quot;
}
</code></pre><p>Personally, I preferred to put in secrets here so it requires less typing later if you need to use it multiple times in different actions.</p>
<p><code>RACK_ENV = &quot;production&quot;</code> is defined here as a building environment variable for docker image (our dockerfile had: <code>ARG RACK_ENV</code>).</p>
<p>For the following piece, I used <code>heroku config:set</code> command to propagate all my variables and secrets to heroku runtime variables:</p>
<pre><code class="language-github" data-lang="github">action &quot;heroku.envs&quot; {
  uses = &quot;actions/heroku@master&quot;
  needs = &quot;heroku.push&quot;

  args = [
    &quot;config:set&quot;,
    &quot;RACK_ENV=$RACK_ENV&quot;,
    &quot;MY_SECRET=$MY_SECRET&quot;
  ]

  secrets = [
    &quot;HEROKU_API_KEY&quot;,
    &quot;HEROKU_APP&quot;,
    &quot;MY_SECRET&quot;
  ]

  env = {
    RACK_ENV = &quot;production&quot;
  }
}
</code></pre><p>And finally, a deployment:</p>
<pre><code class="language-github" data-lang="github">action &quot;heroku.deploy&quot; {
  uses = &quot;actions/heroku@master&quot;
  needs = [&quot;heroku.envs&quot;, &quot;heroku.push&quot;]

  args = [&quot;container:release&quot;, &quot;web&quot;]

  secrets = [
    &quot;HEROKU_API_KEY&quot;,
    &quot;HEROKU_APP&quot;,
    &quot;MY_SECRET&quot;
  ]

  env = {
    RACK_ENV = &quot;production&quot;
  }
}
</code></pre><p>At this moment, you should also update your workflow:</p>
<pre><code class="language-github" data-lang="github">...
resolves = [&quot;heroku.deploy&quot;]
...
</code></pre><p>because that&rsquo;s the action you need to resolve to.</p>
<p>For a cherry on the top, I would add Slack notification and for that, we will need custom action, turns out it&rsquo;s easy to do this. As a starting point, replicate the following structure in your project folder:</p>
<pre><code class="language-term" data-lang="term">.github/
  slack/
    Dockerfile
    entrypoint.sh
</code></pre><p>For <code>entrypoint.sh</code> I defined a simple message posting to Slack:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh"><span style="color:#ff79c6">#!/bin/sh
</span><span style="color:#ff79c6"></span><span style="color:#8be9fd;font-style:italic">set</span> -e
curl -X POST -H <span style="color:#f1fa8c">&#39;Content-type: application/json&#39;</span> <span style="color:#f1fa8c">\
</span><span style="color:#f1fa8c"></span> --data <span style="color:#f1fa8c">&#34;{\&#34;text\&#34;: \&#34;</span><span style="color:#8be9fd;font-style:italic">$*</span><span style="color:#f1fa8c">\&#34;,\&#34;attachments\&#34;:[{\&#34;footer\&#34;: \&#34;</span><span style="color:#8be9fd;font-style:italic">$GITHUB_ACTOR</span><span style="color:#f1fa8c"> / </span><span style="color:#8be9fd;font-style:italic">$GITHUB_REPOSITORY</span><span style="color:#f1fa8c"> / </span><span style="color:#8be9fd;font-style:italic">$GITHUB_SHA</span><span style="color:#f1fa8c">\&#34;}]}&#34;</span> <span style="color:#f1fa8c">\
</span><span style="color:#f1fa8c"></span><span style="color:#8be9fd;font-style:italic">$SLACK_WEBHOOK_URL</span>
</code></pre></div><p>The important part: <code>$*</code> - command arguments will be pasted here. For the rest, please refer to Slack documentation.</p>
<p>Minimal dockerfile:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-docker" data-lang="docker"><span style="color:#ff79c6">FROM</span><span style="color:#f1fa8c"> debian:9.5-slim</span>

<span style="color:#ff79c6">RUN</span> apt-get update -qq <span style="color:#ff79c6">&amp;&amp;</span> apt-get install -y curl

<span style="color:#ff79c6">ARG</span> SLACK_WEBHOOK_URL
<span style="color:#ff79c6">ARG</span> GITHUB_ACTOR
<span style="color:#ff79c6">ARG</span> GITHUB_REPOSITORY
<span style="color:#ff79c6">ARG</span> GITHUB_SHA

<span style="color:#ff79c6">LABEL</span> <span style="color:#f1fa8c">&#34;com.github.actions.name&#34;</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;Slack notifier&#34;</span>
<span style="color:#ff79c6">LABEL</span> <span style="color:#f1fa8c">&#34;com.github.actions.description&#34;</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;Sends message to slack channel&#34;</span>
<span style="color:#ff79c6">LABEL</span> <span style="color:#f1fa8c">&#34;com.github.actions.icon&#34;</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;bell&#34;</span>
<span style="color:#ff79c6">LABEL</span> <span style="color:#f1fa8c">&#34;com.github.actions.color&#34;</span><span style="color:#ff79c6">=</span><span style="color:#f1fa8c">&#34;yellow&#34;</span>

<span style="color:#ff79c6">ADD</span> entrypoint.sh /entrypoint.sh
<span style="color:#ff79c6">ENTRYPOINT</span> [<span style="color:#f1fa8c">&#34;/entrypoint.sh&#34;</span>]
</code></pre></div><p>GitHub labels allow to customize the visual appearance of our action (you can see it later in GitHub workflow view). For a full customization refer to the documentation: <a href="https://developer.github.com/actions/creating-github-actions/creating-a-new-action/#hello-world-action-example">creating-a-new-action</a> / <a href="https://developer.github.com/actions/creating-github-actions/creating-a-docker-container/#label">color list</a> / <a href="https://developer.github.com/actions/creating-github-actions/creating-a-docker-container/#supported-feather-icons">icon list</a>.</p>
<p>At the end, make sure your code is executable:</p>
<pre><code class="language-term" data-lang="term">chmod +x entrypoint.sh
</code></pre><p>A final touch on workflow:</p>
<pre><code class="language-github" data-lang="github">workflow &quot;Test and deploy to heroku&quot; {
  on = &quot;push&quot;
  resolves = [&quot;slack.notifier&quot;]
}

...

action &quot;slack.notifier&quot; {
  uses = &quot;./.github/slack&quot;
  needs = [&quot;heroku.deploy&quot;]
  args = &quot;Deployed!&quot;
  secrets = [&quot;SLACK_WEBHOOK_URL&quot;]
  # GITHUB_* envs are automatically here
}
</code></pre><p>and here is the result:</p>
<figure class="image">
    <img src="/posts/2019/github-actions-beta-full-workflow.png" >
    <figcaption>Full workflow visualised</figcaption>
</figure>

<p>To sum it all up, I am very happy with the upcoming GitHub changes. My dummy project proved me that GitHub Actions are more than capable of replacing parts of our current pipeline and once a stable release is ready, we will plan to integrate it with our commercial project.</p>
<p>Link to repo: <a href="https://github.com/qbart/test-github-actions">https://github.com/qbart/test-github-actions</a>.</p>
<p>PS. If you find any errors in my article/code please let me know :)</p>
<p>And a couple of screenshots I took during the development:</p>
<figure class="image">
    <img src="/posts/2019/github-actions-beta-managing-secrets.png" >
    <figcaption>Managing secrets</figcaption>
</figure>

<figure class="image">
    <img src="/posts/2019/github-actions-beta-workflow-preview.png" >
    <figcaption>Workflow preview</figcaption>
</figure>

<figure class="image">
    <img src="/posts/2019/github-actions-beta-editing-workflow-init.png" >
    <figcaption>Editing workflow (my initial attempts)</figcaption>
</figure>

<figure class="image">
    <img src="/posts/2019/github-actions-beta-failed-workflow.png" >
    <figcaption>Failed workflow</figcaption>
</figure>

<figure class="image">
    <img src="/posts/2019/github-actions-beta-failed-action-logs.png" >
    <figcaption>Failed action logs</figcaption>
</figure>

<figure class="image">
    <img src="/posts/2019/github-actions-beta-invalid-workflow-config.png" >
    <figcaption>Invalid workflow config</figcaption>
</figure>

<figure class="image">
    <img src="/posts/2019/github-actions-beta-workflow-in-progress.png" >
    <figcaption>Workflow in progress</figcaption>
</figure>

]]></content></item><item><title>Slides: From Ruby to Crystal</title><link>https://qbart.dev/posts/2018/slides-from-ruby-to-crystal/</link><pubDate>Wed, 27 Jun 2018 13:15:00 +0200</pubDate><guid>https://qbart.dev/posts/2018/slides-from-ruby-to-crystal/</guid><description>Presentation about transition from Ruby to Crystal programming language.</description><content type="html">&lt;p>&lt;a href="https://docs.google.com/presentation/d/1XeIRwl1Y9IUAxsFdmUmRjpLl1CrIzRgFo5wdWJrsYTc/edit?usp=sharing">Presentation&lt;/a> about transition from Ruby to Crystal programming language.&lt;/p></content></item><item><title>Writing a Regular Expression Tester in Crystal as a Learning Exercise</title><link>https://qbart.dev/posts/2018/writing-a-regular-expression-tester-in-crystal-as-a-learning-exercise/</link><pubDate>Fri, 08 Jun 2018 18:00:00 +0200</pubDate><guid>https://qbart.dev/posts/2018/writing-a-regular-expression-tester-in-crystal-as-a-learning-exercise/</guid><description>App screenshot TL;DR for those in a rush I did this: http://www.crystular.org/. This article was originally published here.
Boring introduction As a part-time Rubyist, I couldn&amp;rsquo;t ignore Crystal any longer (+ I enjoy learning new programming languages) so I decided to give it a try. Because I wanted to write something useful and contribute to the community, I was looking for a small idea in the Ruby world and spoiler alert… I found it.</description><content type="html"><![CDATA[<figure class="image">
    <img src="/posts/2018/crystular.png" >
    <figcaption>App screenshot</figcaption>
</figure>

<h2 id="tldr-for-those-in-a-rush">TL;DR for those in a rush</h2>
<p>I did this: <a href="http://www.crystular.org/">http://www.crystular.org/</a>.
This article was originally published <a href="https://medium.com/selleo/writing-a-regular-expression-tester-in-crystal-as-a-learning-exercise-481935d6672f">here</a>.</p>
<h2 id="boring-introduction">Boring introduction</h2>
<p>As a part-time Rubyist, I couldn&rsquo;t ignore <a href="https://crystal-lang.org/">Crystal</a> any longer (+ I enjoy learning new programming languages) so I decided to give it a try. Because I wanted to write something useful and contribute to the community, I was looking for a small idea in the Ruby world and spoiler alert… I found it.</p>
<p>One of my favourite online tools is <a href="https://rubular.com/">Rubular</a> - a regular expression tester for Ruby so I&rsquo;ve decided to make a copy of it for Crystal because every programming language needs one.</p>
<h2 id="notes-about-regexengine">Notes about regex engine</h2>
<p>Crystal uses <a href="http://www.pcre.org/">PCRE</a> which is a C library for regular expressions. For a contrast, Ruby uses Onigmo library (since 2.x). There are few differences that are worth mentioning between Crystal integration of PCRE and regex library itself.</p>
<p>Firstly, PCRE offers support for other encodings but Crystal strings are UTF-8 only, therefore regular expressions must be UTF-8 too.</p>
<p>Secondly, one of the regex options in Crystal is a multiline match denoted by <code>&quot;m&quot;</code> flag that translates into a combination of two separate options in PCRE:</p>
<ul>
<li><strong>PCRE_DOTALL</strong> - changes the behavior of <code>.</code> in regex</li>
<li><strong>PCRE_MULTILINE</strong> - changes the behavior of <code>^</code> and <code>$</code> in regex</li>
</ul>
<p>FYI, Ruby does it too in its own engine.</p>
<h2 id="implementation">Implementation</h2>
<p>While working on the project I wanted to add some minor tweaks that would improve, in my opinion, your <em>&ldquo;regular expression testing experience&rdquo;</em>. Here is the list of what I had planned:</p>
<ul>
<li>
<p>improved whitespace characters display and turned on by default (every space/tab/newline is rendered as a special character in a different color)</p>
</li>
<li>
<p>clearer distinction when matched strings are next to each other (matches are highlighted with rounded corners selection)</p>
</li>
<li>
<p>extended reference sheet by adding examples like &ldquo;positive lookbehind&rdquo; because who remembers that syntax? (not me, I need to google it every time)</p>
</li>
</ul>
<p>Once my goals were set, I had to choose web framework and I had a couple options here: <a href="https://amberframework.org/">Amber</a>, <a href="https://luckyframework.org/">Lucky</a> and <a href="https://kemalcr.com/">Kemal</a>. I went with Kemal as it seemed like a no-brainer, considering the size of the application (two endpoints, one view). Deployment to Heroku was also a breeze thanks to the existing <a href="https://github.com/crystal-lang/heroku-buildpack-crystal">buildpack</a>.</p>
<p>Because of the statically type-checked nature of the language doing TDD requires a bit different approach especially, if you declare your types explicitly - sometimes you just need to write some dummy code in the method just to make compilation successful. The same affects <code>nils</code>, crystal will know if your code results in <code>nil</code> so the compilation process might fail, but that&rsquo;s just Crystal having your back and protecting you from unhandled exceptions.</p>
<p>There were a few occasions when I had to intensively browse the code in GitHub to understand Kemal or Crystal standard library but this is a part of the learning process so I am fine with it. Also, these projects are still young, at that stage, it&rsquo;s pretty normal.</p>
<p>Things I wish to see improved are better support for specs, it&rsquo;s quite ok now but I guess <a href="https://github.com/rspec">RSpec</a> spoiled me, and I am hoping for some solid debugging process.</p>
<p>The code can be found <a href="https://github.com/Selleo/crystular">here</a>.</p>
<h2 id="closing-thoughts">Closing thoughts</h2>
<p>After finishing the project, I was happy with the result and the things I&rsquo;ve learned. It was surprising how quickly you can transition to Crystal having a background in Ruby so if you are a Rubyist, I recommend you to try Crystal out.</p>
]]></content></item><item><title>Slides: Graphing - Minimal guide to graph databases</title><link>https://qbart.dev/posts/2017/slides-graphing-minimal-guide-to-graph-databases/</link><pubDate>Tue, 14 Feb 2017 13:15:00 +0200</pubDate><guid>https://qbart.dev/posts/2017/slides-graphing-minimal-guide-to-graph-databases/</guid><description>Presentation about Neo4j.</description><content type="html">&lt;p>&lt;a href="https://docs.google.com/presentation/d/1GcsBTtXYQyyROhOsl7Ymrn5wSCsS9nEJ5emRzXozqL0/edit?usp=sharing">Presentation&lt;/a> about Neo4j.&lt;/p></content></item><item><title>Slides: Database integrity vs. Rails (Revised)</title><link>https://qbart.dev/posts/2015/slides-database-integrity-vs.-rails-revised/</link><pubDate>Tue, 10 Mar 2015 13:15:00 +0200</pubDate><guid>https://qbart.dev/posts/2015/slides-database-integrity-vs.-rails-revised/</guid><description>Presentation about foreign keys and constraints.</description><content type="html">&lt;p>&lt;a href="https://docs.google.com/presentation/d/118NPeaQwNvpKExZ84GAI4XypdAg12iL8m50JTIN_LvM/edit?usp=sharing">Presentation&lt;/a> about foreign keys and constraints.&lt;/p></content></item><item><title>Slides: My new fav things in pgSQL 9.3/9.4</title><link>https://qbart.dev/posts/2015/slides-my-new-fav-things-in-pgsql-9.3/9.4/</link><pubDate>Tue, 10 Mar 2015 13:15:00 +0200</pubDate><guid>https://qbart.dev/posts/2015/slides-my-new-fav-things-in-pgsql-9.3/9.4/</guid><description>Presentation about filtering and lateral join.</description><content type="html">&lt;p>&lt;a href="https://docs.google.com/presentation/d/1SGbPwGa7siVrTsY68CmMdrRkLaXSMYgUYwyvz8MmCO0/edit?usp=sharing">Presentation&lt;/a> about filtering and lateral join.&lt;/p></content></item><item><title>Slides: Don’t use three state boolean</title><link>https://qbart.dev/posts/2015/slides-dont-use-three-state-boolean/</link><pubDate>Mon, 12 Jan 2015 13:15:00 +0200</pubDate><guid>https://qbart.dev/posts/2015/slides-dont-use-three-state-boolean/</guid><description>Presentation about abusing boolean values in database.</description><content type="html">&lt;p>&lt;a href="https://docs.google.com/presentation/d/1jhvn-0rT_qHJgZpT7GAmn3EjHrgjbX2WRvuZo4Wnst0/edit?usp=sharing">Presentation&lt;/a> about abusing boolean values in database.&lt;/p></content></item><item><title>My MSc thesis: Dynamic gamification in project management</title><link>https://qbart.dev/posts/2013/my-msc-thesis-dynamic-gamification-in-project-management/</link><pubDate>Tue, 16 Jul 2013 13:00:00 +0200</pubDate><guid>https://qbart.dev/posts/2013/my-msc-thesis-dynamic-gamification-in-project-management/</guid><description>Presentation about my MSc Thesis. Full paper can be downloaded here (only in Polish).</description><content type="html"><![CDATA[<p><a href="https://docs.google.com/presentation/d/1NWPH4v1ttquvY0eUYoVEkLyxrFdHG0Thm8NiSzKD93c/edit?usp=sharing">Presentation</a> about my MSc Thesis. Full paper can be downloaded <a href="http://users.pja.edu.pl/~mtrzaska/Files/PraceMagisterskie/130711-Wojtowicz.pdf">here</a> (only in Polish).</p>
]]></content></item><item><title>Slides: DB integrity vs. rails</title><link>https://qbart.dev/posts/2013/slides-db-integrity-vs.-rails/</link><pubDate>Tue, 14 May 2013 13:15:00 +0200</pubDate><guid>https://qbart.dev/posts/2013/slides-db-integrity-vs.-rails/</guid><description>Presentation about data integrity in PostgreSQL and Ruby on Rails.</description><content type="html">&lt;p>&lt;a href="https://docs.google.com/presentation/d/15ERLaBmmo8rPu5i5EP4Gk1p6X_wR4EVD3K0Ob5dKDnQ/edit?usp=sharing">Presentation&lt;/a> about data integrity in PostgreSQL and Ruby on Rails.&lt;/p></content></item><item><title>Slides: DB tuning tips</title><link>https://qbart.dev/posts/2013/slides-db-tuning-tips/</link><pubDate>Mon, 08 Apr 2013 13:15:00 +0200</pubDate><guid>https://qbart.dev/posts/2013/slides-db-tuning-tips/</guid><description>Presentation about possible strategies for database tuning.</description><content type="html">&lt;p>&lt;a href="https://docs.google.com/presentation/d/13M7wtag-xggh5ihJnnm-Pgc_zbSj-LiLmAQ3fWTbhUE/edit?usp=sharing">Presentation&lt;/a> about possible strategies for database tuning.&lt;/p></content></item><item><title>Slides: Some pgSQL - grouping and window functions</title><link>https://qbart.dev/posts/2012/slides-some-pgsql-grouping-and-window-functions/</link><pubDate>Thu, 22 Nov 2012 13:15:00 +0200</pubDate><guid>https://qbart.dev/posts/2012/slides-some-pgsql-grouping-and-window-functions/</guid><description>Presentation about grouping, trigger and window functions in Postgres.</description><content type="html">&lt;p>&lt;a href="https://docs.google.com/presentation/d/10ulizOIFgYhrYSwJdamWCjdJSW83hVZSVCAdAJFa4lQ/edit?usp=sharing">Presentation&lt;/a> about grouping, trigger and window functions in Postgres.&lt;/p></content></item><item><title>Slides: Dependency cache generation during synchronization</title><link>https://qbart.dev/posts/2012/slides-dependency-cache-generation-during-synchronization/</link><pubDate>Thu, 22 Nov 2012 13:00:00 +0200</pubDate><guid>https://qbart.dev/posts/2012/slides-dependency-cache-generation-during-synchronization/</guid><description>Presentation about topological sorting algorithm.</description><content type="html">&lt;p>&lt;a href="https://docs.google.com/presentation/d/1OzivdzxP8n_dzosSHOHuW0ld_hG8D8FtddRp3iIWk88/edit?usp=sharing">Presentation&lt;/a> about topological sorting algorithm.&lt;/p></content></item></channel></rss>